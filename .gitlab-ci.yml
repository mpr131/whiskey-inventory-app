# GitLab CI/CD Pipeline for Whiskey Inventory App
# Deploy to Mac Mini (.119) from dev branch, Big NUC (.71) from main branch

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  # Production deployment settings
  DEPLOY_HOST: "192.168.1.71"
  DEPLOY_PORT: "3005"
  DEPLOY_USER: "ams237"
  DEPLOY_APP_DIR: "/home/ams237/webapps/whiskey-inventory"
  DEPLOY_LOGS_DIR: "/home/ams237/logs/webapps/whiskey-inventory"
  DEPLOY_MONGODB_URI: "mongodb://mongodb-web:27017/whiskey"
  # Dev settings (Mac Mini)
  DEV_PORT: "3000"
  DEV_MONGODB_URI: "mongodb://localhost:27017/whiskey-inventory"
  # App settings
  APP_NAME: "whiskey-inventory"
  NETWORK_NAME: "infrastructure_infrastructure"

stages:
  - test
  - deploy

# Cache node_modules between jobs
.node_cache:
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - node_modules/
    policy: pull-push

# Test stage - runs on all branches
# No tags requirement to avoid stuck jobs
test:
  stage: test
  image: node:18-alpine
  extends: .node_cache
  before_script:
    - npm install
  script:
    # Run lint but don't fail on warnings
    - npm run lint || true
    # Ensure the app builds successfully
    - npm run build
  artifacts:
    paths:
      - .next/
    expire_in: 1 hour
  except:
    - tags

# Deploy to development (Mac Mini) - dev branch only
deploy-dev:
  stage: deploy
  image: ubuntu:22.04
  script:
    - |
      echo "=== Development Deployment Instructions ==="
      echo ""
      echo "For local development on Mac Mini (.119):"
      echo ""
      echo "1. Pull the latest code:"
      echo "   git pull origin dev"
      echo ""
      echo "2. Build and run with docker-compose:"
      echo "   docker-compose up --build -d"
      echo ""
      echo "3. Or build manually:"
      echo "   docker build -t whiskey-inventory:dev ."
      echo "   docker run -d --name whiskey-inventory-dev -p $DEV_PORT:$DEV_PORT whiskey-inventory:dev"
      echo ""
      echo "The app will be available at: http://localhost:$DEV_PORT"
  only:
    - dev
  environment:
    name: development
    url: http://localhost:$DEV_PORT

# Deploy to production (Big NUC) - main branch only
deploy-production:
  stage: deploy
  image: docker:24
  only:
    - main
  variables:
    DOCKER_HOST: unix:///var/run/docker.sock
  script:
    - echo "Deploying using Docker Compose on Big NUC..."
    - cd $CI_PROJECT_DIR
    - docker compose -f docker-compose.yml -f docker-compose.prod.yml down || true
    - docker compose -f docker-compose.yml -f docker-compose.prod.yml build --no-cache
    - docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
    - echo "Deployment complete! Checking container status..."
    - docker compose -f docker-compose.yml -f docker-compose.prod.yml ps
  environment:
    name: production
    url: http://$DEPLOY_HOST:$DEPLOY_PORT

# Manual rollback job for production
rollback-production:
  stage: deploy
  image: ubuntu:22.04
  before_script:
    - apt-get update && apt-get install -y openssh-client
    - mkdir -p ~/.ssh
    - printf '%s\n' "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - echo "First line of key:" && head -1 ~/.ssh/id_rsa
    - echo "Key file size:" && wc -c ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $DEPLOY_HOST >> ~/.ssh/known_hosts
  script:
    - |
      ssh -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_HOST << EOF
        set -e
        
        # Set variables from CI environment
        APP_DIR="$DEPLOY_APP_DIR"
        APP_NAME="$APP_NAME"
        PORT="$DEPLOY_PORT"
        NETWORK="$NETWORK_NAME"
        DEPLOY_HOST="$DEPLOY_HOST"
        DEPLOY_LOGS_DIR="$DEPLOY_LOGS_DIR"
        
        echo "=== Rolling back to previous commit ==="
        
        cd \$APP_DIR
        
        # Get current and previous commit
        CURRENT_COMMIT=\$(git rev-parse --short HEAD)
        git reset --hard HEAD~1
        PREVIOUS_COMMIT=\$(git rev-parse --short HEAD)
        
        echo "Rolling back from \$CURRENT_COMMIT to \$PREVIOUS_COMMIT"
        
        # Rebuild with previous commit
        docker build \
          --build-arg PORT=\$PORT \
          --build-arg MONGODB_URI=$DEPLOY_MONGODB_URI \
          --build-arg NEXTAUTH_URL=http://\$DEPLOY_HOST:\$PORT \
          --build-arg NEXT_PUBLIC_APP_URL=http://\$DEPLOY_HOST:\$PORT \
          --target runner \
          -t whiskey-inventory:rollback \
          .
        
        # Stop current container
        docker stop \$APP_NAME || true
        docker rm \$APP_NAME || true
        
        # Start rollback container
        docker run -d \
          --name \$APP_NAME \
          --restart unless-stopped \
          --network \$NETWORK \
          -p \$PORT:\$PORT \
          -e NODE_ENV=production \
          -e PORT=\$PORT \
          -e MONGODB_URI=$DEPLOY_MONGODB_URI \
          -e NEXTAUTH_URL=http://\$DEPLOY_HOST:\$PORT \
          -e NEXTAUTH_SECRET="$NEXTAUTH_SECRET" \
          -e NEXT_PUBLIC_APP_URL=http://\$DEPLOY_HOST:\$PORT \
          -e CLOUDINARY_CLOUD_NAME="$CLOUDINARY_CLOUD_NAME" \
          -e CLOUDINARY_API_KEY="$CLOUDINARY_API_KEY" \
          -e CLOUDINARY_API_SECRET="$CLOUDINARY_API_SECRET" \
          -v \$DEPLOY_LOGS_DIR:/app/logs \
          whiskey-inventory:rollback
        
        sleep 10
        
        # Verify rollback
        if docker ps | grep -q \$APP_NAME && curl -f http://localhost:\$PORT/api/health > /dev/null 2>&1; then
          echo "✓ Rollback successful to commit \$PREVIOUS_COMMIT"
        else
          echo "✗ Rollback failed"
          docker logs \$APP_NAME
          exit 1
        fi
      EOF
  when: manual
  only:
    - main
  environment:
    name: production
    url: http://$DEPLOY_HOST:$DEPLOY_PORT